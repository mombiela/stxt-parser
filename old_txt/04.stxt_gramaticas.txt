===========================================
Semantic text: Creación y uso de gramáticas
===========================================

* (**) Namespaces y gramáticas
* (**) Regla básica
* Un ejemplo para empezar
* Como se crean y se leen los Namespaces
* Nodos de tipo Nodo
* Nodos de tipo Texto
* Nodos de tipo Numérico
* Nodos de tipo Byte
* Un ejemplo para finalizar
* (**) Una última reflexión
* (***) Gramática de la gramática
* Resumen

En este capítulo explicaremos las reglas de creación de documentos, desde el punto de vista
de las gramáticas y los namespaces. Para ello primero haremos una reflexión de como se relacionan,
para a continuación explicar las normas de su uso y funcionamiento.

Hay partes que pueden parecer complejas, pero en realidad todo es muy intuitivo. Mucho más que
otras tecnologías (estoy pensando en dtd's, xml's y xsd's), pero con una potencia similar.

Es más, es tan simple que con un capítulo creo que será suficiente para explicar-lo todo.
Atentos, esto es complejo, pero valdrá la pena ;-) 

Cuando terminemos ya casi seréis unos explertos de STXT :-)

----------------------------
(**) Namespaces y gramáticas
----------------------------

Vamos a distinguir entre namespaces y gramáticas.

A veces hablamos de gramáticas y de namespaces de forma indistinta, aunque en realidad no es "exactamente" lo mismo.
Un namespace define un conjunto de nodos, con unas reglas completamente definidas. La gramática no es ningún documento
en sí, pero se crearía a partir de uno o varios namespaces. Cuando decimos que tiene que cumplir 
la gramática decimos que todos los nodos deben ser correctos, cada uno dependiendo de su namespace y definición.

		"Que me perdonen los informáticos, no estoy hablando de gramática en el sentido estricto, o
  		tal como ellos entienden las gramáticas. Yo hablo de una forma más "mundana"."

"Una gramática es una definción cruzada entre varios namespaces, para un tipo de documento dado".

Por ejemplo: los namespaces son:

NS1:
---
xxx: debe contener yyy,zzz,ttt
yyy: nodo texto
zzz: nodo texto
ttt: tipo nodo, debe contener zzz(NS2)

NS2:
---
zzz: texto

La gramática de xxx verifica que el elemento xxx tenga la siguiente estructura:

xxx
	yyy
	zzz
	ttt
		zzz

-----------------
(**) Regla básica
-----------------

			Un documento es válido si todos sus nodos son válidos de acuerdo con la gramática.

Sabemos que un documento STXT es un conjunto estructurado de nodos, dónde cada uno de ellos 
debe perteneder a un namespace. Pues bien, debido a esto podemos afirmar también:

			Un documento no es válido si hay algún nodo sin namespace o éste es incorrecto

Bien, ésto ya lo sabíamos, y lo mejor de todo es que esto es //casi// automático, ya que no
debermos dar la definición de cada namespace. **Sólo será necesario especificar el namespace del primer
nodo**, los namespaces de los siguientes se deducirán de su gramática (o definiciones cruzadas de todos
los namespaces implicados).

Finalmente, también podemos deducir que

			Un nodo es válido si su contenido es válido
			
Con ésto quiero remarcar que para verificar la validez de un documento se puede ir nodo por nodo,
verificando su contenido. Si todos los nodos són válidos, ya está. El documento será válido.
Es por esto que para ello sólo nos tendremos que centrar en un nodo, y repetir la verificación
en cada uno de ellos.

-----------------------
Un ejemplo para empezar
-----------------------

Vamos a hacer un ejemplo, pero ahora iremos a la inversa que en el capítulo anterior.
Empezaremos por la gramática del documento, definiremos sus nodos y características, y
finalmente crearemos un documentos de prueba. 

Imaginemos que tenemos un gimnasio, y queremos una ficha de clientes.
En esta ficha irán los datos personales y los datos bancarios.

Así, un cliente tendrá dos nodos principales:

- Datos Personales
- Datos Bancarios

A su vez, en datos personales, queremos los siguientes datos:

- Nombre
- Primer apellido
- Segundo apellido
- Edad
- Cliente vip
- Foto 

Finalmente, en datos bancarios tendríamos:

- Titular cuenta
- Número cuenta

No lo compliquemos más, con esto es suficiente.

Que empieze la fiesta! :-D

--------------------------------------
Como se crean y se leen los Namespaces
--------------------------------------

Crear un namespace es crear un documento STXT con una estructura determinada y ponerlo accesible
en la web. Ésto es importante, ya que **ESTE DOCUMENTO TIENE QUE EXISTIR**.
El documento tiene que ser una definición de namespace (Namespace Definition), tal como está definida en
www.semantictext.info/namespace.stxt.

En nuestro ejemplo el documento debería empezar así:

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Namespace Definition(www.semantictext.info/namespace.stxt):

# NAMESPACE: www.gymstxt.com/client.stxt
# A continuación irá la definición de cada nodo del namespace

....
....
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Dentro de este documento irán las definiciones de todos los nodos (//tipos// dentro
del namespace).

Cada nodo debe tener la siguiente forma:

++++++++++++++++++++
Type Name:
	Name:
	Alias:
	Type:
	Description:
	Child:
		Type:
		Namespace:
		Num:
+++++++++++++++++++++

Vamos a desglosar cada parte:

* Type Name: Inicio de la definición del tipo. Dentro se deben
	especificar las siguientes características:
	* Name: es el nombre del tipo. Es obligatorio, y sólo puede haber uno.
		Además, no puede repetirse en todo el documento, ya que sinó
	    habría conflictos.
	* Alias: es un sinónimo del nombre (Name), y puede haber tantos alias
	    como se quiera. Pero tiene la misma restricción que nombre,
	    es decir, que no se puede repetir, ni con otros alias ni con
	    otros nombres en todo del namespace.
	* Type: Es el tipo de nodo. Hay 10 tipos de nodos, pero los 2 primeros
		son los más importantes:
			- **NODE**: Nodo contenedor de otros nodos
			- **TEXT**: Nodo con contenido texto
			- NATURAL: Nodo con un número natural
			- INTEGER: Nodo con un número entero
			- RATIONAL: Nodo con un número racional
			- NUMBER: Nodo numérico
			- BINARY: Nodo binario
			- HEXADECIMAL: Nodo con contenido hexadecimal
			- BASE64: Nodo con contenido en Base64
			- BOOLEAN: Nodo con contenido boleano
		Es obligatorio definir el tipo del nodo.
	* Description: Damos una descripción de lo que es este nodo, explicativa
		a "modo humano". Esto es muy útil, ya que nos permite saber realmente
		qué es un nodo, y así conocer con detalle el contenido de un documento.
		Aún así, no es obligatorio, pero si muy recomendable.
	* Child: Especifica un posible nodo hijo. Debe tener los siguientes atributos:
		* Type: Nombre del tipo del hijo. Es obligatorio especificar este dato.
		* Namespace: Namespace del tipo del hijo. No es obligatorio especifcarlo,
			en cuyo caso se supondrá que es del mismo namespace.
		* Num: especifica cuantos elementos de este tipo pueden aparecer. Es 
			obligatorio. Puede tener los siguientes valores:
				- *: Significa que puede haber un número indetermiado de estos hijos
				- ?: Puede haber 1 o 0 de estos hijos
				- +: Tiene que haber al menos 1
				- número: Tiene que haber un número exacto de estos hijos
	
Vamos a mostrar como empezaríamos con nuestro ejemplo, y en los próximos capítulos iremos desglosando y terminando cada parte.
Es bastante intuitivo, pero vale la pena demorarse en los detalles:

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Namespace Definition(www.semantictext.info/namespace.stxt):

# NAMESPACE: www.gymstxt.com/client.stxt
# A continuación irá la definición de cada nodo del namespace

# --------------
# Nodo principal
# --------------

Type Name: 
	Name: **Cliente**
	Type: NODE
	...

# -------------
# Nodos básicos
# -------------

Type Name:
	Name: **Datos Personales**
	Type: NODE
	...

# -------------
# Nodos simples
# -------------

Type Name:
	Name: **Nombre**
	Type: TEXT
	...
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

------------------
Nodos de tipo Nodo
------------------

El nodo con el type NODE es quizá el más importante, ya que siempre tiene que estar.
Es un nodo que puede contener a otros, y siempre tiene que haber nodos de este tipo.
Son agrupadores de conceptos, y permiten toda la estructura jerárquica de STXT.

Vamos a nuestro ejemplo concreto, y rellenemos todo este contenido. En particular,
y principalmente tenemos que decir qué hijos pueden tener, en que cantidad, y
su namespace si fuera diferente al que estamos definiendo (no es este caso).

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
...
...

# --------------
# Nodo principal
# --------------

Type Name: 
	Name: Cliente
	Type: NODE
	Child:
		Type: Datos Personales 
		Num: 1
	Child:
		Type: Datos Bancarios 
		Num: 1

# -------------
# Nodos básicos
# -------------

Type Name:
	Name: Datos Personales
	Type: NODE
	Child:
		Type: Nombre
		Num: 1
	Child:
		Type:  Primer apellido
		Num: 1
	Child:
		Type: Segundo apellido
		Num: ?
	Child:
		Type: Edad
		Num: ?
	Child:
		Type: Cliente vip
		Num: ?
	Child:
		Type: Foto
		Num: * 
	
Type Name:
	Name: Datos Bancarios
	Type: NODE
	Child:
		Type: Titular cuenta 
		Num: ?
	Child:
		Type: Número cuenta 
		Num: 1
	
...
...
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Ya está. Hemos definido todos los nodos de nuestro tipo de documento.
Con estos nodos ya podemos ver un poco la estructura que tiene que tener,
de forma resumida seria:

Cliente:
	Datos Personales:
		Nombre:
		Primer apellido:
		Segundo apellido:
		Edad:
		Cliente vip:
		Foto:
	Datos Bancarios:
		Titular cuenta:
		Número cuenta:
	
Ahora sólo falta definir como serán los otros tipos nodos.

--------------
Nodos de texto
--------------

Ya hemos apuntado anteriormente que los nodos básicos más importantes son los de texto.
De hecho, todos los tipos básicos serán como los de texto, pero restringiendo
los valores que puede tomar.

Ahora vamos a revisar todos los que hay, y aplicarlos a nuestro ejemplo.

- - -
TEXT 
- - -

Los nodo de este tipo corresponden a texto, sin ninguna restricción concreta.

Dentro de nuestro ejemplo tendríamos la mayoría de los nodos:

* Nombre
* Primer apellido
* Segundo apellido
* Titular cuenta
* Número cuenta

Estos nodos quedarían de la siguiente forma dentro del documento:

+++++++++++++++++++++++++++++++++++++
...
...

# --------------
# Nodos de texto
# --------------

Type Name:
	Name: Nombre
	Type: TEXT
	
Type Name:
	Name: Primer apellido
	Type: TEXT
	
Type Name:
	Name: Segundo apellido
	Type: TEXT
	
Type Name:
	Name: Titular cuenta
	Type: TEXT
	
Type Name:
	Name: Número cuenta
	Type: TEXT
...
...	
+++++++++++++++++++++++++++++++++++++

---------------
Nodos Numéricos
---------------

Hay cuatro tipos de nodos numéricos, y corresponden a conjuntos matemáticos concretos.
Decimos esto porqué STXT no está ligado a ningún lenguaje de programación, y no tiene
ninguna restricción en cuanto a tamaños o longitudes. Los lenguajes de programación
a menudo sí que tienen estas restricciones, por ejemplo que los enteros sean de 32 o 64 bits.

- - - - - -
NATURAL
- - - - - -

Entendemos por números naturales cualquier número mayor o igual a 0 sin decimales.
Són valores válidos: 0, 132, 5289423647623746237424242853987, etc.

En nuestro ejemplo, el campo edad sería un natural:

+++++++++++++++++++++++++++++++++++++
...
...
	
# ---------------
# Nodos numéricos
# ---------------

Type Name:
	Name: Edad
	Type: NATURAL
...
...	
+++++++++++++++++++++++++++++++++++++

- - - - - -
INTEGER
- - - - - -

Entendemos por números entereos cualquier número sin decimales, positivos
o negativos.

Ejemplos válidos: -100, +423, 23874283, etc.

- - - - - -
RATIONAL
- - - - - -

Los números racionales serán números de la forma aaa/bbb, dónde aaa i bbb són naturales.
También aceptamos números positivos (por defecto) o negativos.

Ejemplos válidos: 1/4, -10/8, 238942598534/43253457438573,...

- - - - - -
NUMBER
- - - - - -

Los números son el tipo genérico para numéricos con decimales, sea cual sea su longitud.
Utilizamos la notación ampliamente aceptada de usar "e" para denotar exponencial de 10, y "."
como separador de decimales.

Ejemplos válidos: 19.27, -2.75345e-20, 1.432, 12, 2398754385734e-122,...

--------------
Nodos con Bits
--------------

- - - - - -
BINARY
- - - - - -

Se trata de mostrar valores binarios, en los que sólo es posible usar 0 o 1's.
Permitimos también como separadores carácteres en blanco o saltos de línea.
Ejemplos válidos: 1010100010, 1000 1010,...

- - - - - -
HEXADECIMAL
- - - - - -

Este tipo de nodo es para mostrar valores binarios, pero en formato
hexadecimal. También permitimos como separadores carácteres en blanco o saltos
de línea.

Ejemplos válidos:

f52360Abcdef000, 0012 3445 523a,...

- - - - - -
BASE64
- - - - - -

Este tipo de nodo también es para mostrar valores binarios, pero esta vez
en Base64. Igual que los anteriores permitimos como separadores carácteres en blanco o saltos
de línea. Este campo puede usarse para contener datos informáticos complejos,
como por ejemplo ficheros o imágenes.

Ejemplo:

SGVsbG8gV29ybGQhISEhISEKSG9sYSBNdW5kbyEhISEhIUhvbGEgTXVuZG8hISEhISFIb2xhIE11
bmRvISEhISEhSG9sYSBNdW5kbyEhISEhIUhvbGEgTXVuZG8hISEhISFIb2xhIE11bmRvISEhISEh
SG9sYSBNdW5kbyEhISEhIUhvbGEgTXVuZG8hISEhISFIb2xhIE11bmRvISEhISEhSG9sYSBNdW5k
byEhISEhIQ==

En nuestro ejemplo de cliente tenemos la foto como un campo de este tipo:

+++++++++++++++++++++++++++++++++++++
...
...
	
# ----------
# Nodos bits
# ----------

Type Name:
	Name: Foto
	Type: BASE64
...
...	
+++++++++++++++++++++++++++++++++++++

- - - - - -
BOOLEAN
- - - - - -

Este valor solo permite mostrar 1 valor binario: 0 o 1, por lo que
también lo interpretamos como valor boleano (verdadero o falso).

En el ejemplo de cliente, lo usuaremos para especificar si un 
cliente es vip o no:

+++++++++++++++++++++++++++++++++++++
...
...
Type Name:
	Name: Cliente vip
	Type: BOOLEAN
...
...	
+++++++++++++++++++++++++++++++++++++


-------------------------
Un ejemplo para finalizar
-------------------------

Bien, ahora que casi hemos terminado, veremos la gramática completa, y un ejemplo de documento.

La gramática:

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Namespace Definition(www.semantictext.info/namespace.stxt):

# NAMESPACE: www.gymstxt.com/client.stxt

# --------------
# Nodo principal
# --------------

Type Name: 
	Name: Cliente
	Type: NODE
	Child:
		Type: Datos Personales 
		Num: 1
	Child:
		Type: Datos Bancarios 
		Num: 1

# -------------
# Nodos básicos
# -------------

Type Name:
	Name: Datos Personales
	Type: NODE
	Child:
		Type: Nombre
		Num: 1
	Child:
		Type:  Primer apellido
		Num: 1
	Child:
		Type: Segundo apellido
		Num: ?
	Child:
		Type: Edad
		Num: ?
	Child:
		Type: Cliente vip
		Num: ?
	Child:
		Type: Foto
		Num: * 
	
Type Name:
	Name: Datos Bancarios
	Type: NODE
	Child:
		Type: Titular cuenta 
		Num: ?
	Child:
		Type: Número cuenta 
		Num: 1

# --------------
# Nodos de texto
# --------------

Type Name:
	Name: Nombre
	Type: TEXT
	
Type Name:
	Name: Primer apellido
	Type: TEXT
	
Type Name:
	Name: Segundo apellido
	Type: TEXT
	
Type Name:
	Name: Titular cuenta
	Type: TEXT
	
Type Name:
	Name: Número cuenta
	Type: TEXT

# ---------------
# Nodos numéricos
# ---------------

Type Name:
	Name: Edad
	Type: NATURAL
	
# ----------
# Nodos bits
# ----------

Type Name:
	Name: Foto
	Type: BASE64

Type Name:
	Name: Cliente vip
	Type: BOOLEAN
	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

El ejemplo, espero que sea suficientemente explicativo:

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ----------------
# Datos de cliente
# ----------------

Cliente(www.gymstxt.com/client.stxt):

# ----------------
# Datos personales
# ----------------

Datos Personales:

	Nombre: Shila
	Primer apellido: Kween
	Edad: 28
	Cliente vip: 1
	Foto:
		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

# Nota: si alguien quiere entretenerse, la foto ha sido dibujada por mí. 
# Comprovaréis que soy bastante mejor informático que ilustrador :-D

# ---------------
# Datos Bancarios
# ---------------

Datos Bancarios:
	Titular cuenta: Joan Costa Mombiela
	Número cuenta: 0000-0000-00-000000000
	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-------------------------
(**) Una última reflexión
-------------------------

	* Es una buena costumbre introducir el nombre de la versión en la gramática? definition_1.0.txt
	  Depende, se quiere un documento que va a variar bastante? Quizá si, o mejor
	  tener uno sin versión con los datos de la última, y mantener otro intocable
	  con número de versión. Esta es una solución híbrida que creo correcta para
	  la mayoría de los casos. Ésto también se ha aplicado con la definición de la
	  gramática en sí.

-------------------------------
(***) Gramática de la gramática
-------------------------------
		
	* Un documento sólo tiene sentido si se tiene la gramática previa. Para definir la gramática
	  hay que hacer un documento, :-O 
	  Con esto tenemos un problema recursivo, por lo que la gramática de definición es implícita
	  y perfectamente conocida. Este documento es público, pero está insertado de forma genérica
	  en todos los parsers de gramáticas.
	  
	  Una gramática tiene que tener:
	  
