===================
Semantic text y XML
===================

* Advertencia al lector
* (***) La leyenda
* Toma de contacto
* Atributos xml
* XSD, DTD
* Parsers y validators
* Namespaces
* Futuro

*********************
Advertencia al lector
*********************

Este captítulo puede herir la sensibilidad de los lectores entusiastas de xml.
Leer bajo vuestra propia responsabilidad. En cualquier caso... pensad que ésto sólo
es mi opinión! No os sintáis ofendidos!

****************
(***) La leyenda
****************

El origen del mal: sgml
Todo empezó hace mucho tiempo, en una tierra oscura llamda "informática".
Los encodings campaban por ese mundo. Sembrando incompatibilidades.
Entorpeciendo comunicaciones. Riéndose de los que no eran como ellos.
Algunos intentaron estar en paz con todos ellos. Y entonces crearon el monstruo: sgml
El monstruo empezaba diciendo con qué encoding se quedaba. Y ya no había
problema. Pero el esfuerzo era demasiado. Un montón de carácteres extraños
eran necesarios. Textos repletos de "<", ">", "&xxx;". Ininteligibles.
Y se han reproducido. El mundo está lleno de sus hijos. Pequeños monstruitos
que llenan la tierra de éstos carácteres, entorpeciendo la lectura para humanos.
Sólo un puñado de élite puede tratar con los monstruos. Se los llama "Los Informáticos".
Son el terror. Nadie los quiere ver, pero todos los necesitan. Son oscuros. Hablan
lenguas extrañas.

Pero los monstruos todavía están aquí. Han mutado. Ahora se llaman xml's.
Y a la gente les gusta!!

...

Pero un pequeño grupo de gente se reunió, y decidió que no podía ser.
Crearían un campeón. Alguien que los iluminara. Sólo puede quedar uno.

					Ha llegado la hora de STXT.

...
...

El mundo está plagado de documentos feos, xml's que nos gustan... pero si es un formato horrible!
Por qué se hizo así? Estamos heredando un formato anticuado, con encodings anticuados,
con forma de pensar muy informatizada. Y está en todas partes. Y seguimos usándolo.
Y queremos que esté para todo... Un momento!! Stop!! Es necesario? Si no supieramos nada
de sgml y quisiéramos tener un txt rápido de parsear, con estructura, con espacio de nombres,
hubiésemos creado xml? Yo creo que no. Si a un niño le decimos que invente algo, supongo
que jamás habría creado xml... hubiese hecho algo más natural... hubiese creado stxt!!
Bien, nosotros tenemos más experiencia y hemos aprendido; vamos a crearlo!! 

****************
Toma de contacto
****************

No quiero asustaros, pero stxt, comparado con xml es:

	- Más bonito
	- Se puede expresar lo mismo
	- Más compacto
	- Más simple
	
En otros apartados también veremos que:

	- I18N de la semántica
	- Más rápido de parsear
	- Todo son namespaces! Y ni tan siquiera los ves!

Vamos a ver un ejemplo de XML, y lo compararemos con STXT, para empezar.
Será un ejemplo fácil:

++++++++++++++++++++++++++++++++++++++++
<?xml version="1.0" encoding="UTF-8" ?> 
<!-- This is a comment  --> 
<note>
<to>Tove</to> 
<from>Jani</from> 
<heading>Reminder</heading> 
<body>Don't forget me this weekend!</body> 
</note>
++++++++++++++++++++++++++++++++++++++++

Vamos a ver la version de STXT:

++++++++++++++++++++++++++++++++++++++++
# This is a comment
Note (www.example.com/notes.stxt):
	To: Tove
	From: Jani
	Heading: Reminder
	Body: Don't forget me this weekend! 
++++++++++++++++++++++++++++++++++++++++

Creo que salta a la vista una primera característica:

			STXT es mucho más bonito que XML, y se entiende mejor 

Vamos a por el tamaño.

Longitud XML: 198
Longitud STXT: 139

Veamos cuando compactamos al máximo

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<?xml version="1.0" encoding="UTF-8" ?> 
<note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++
Note (www.example.com/notes.stxt):
To:Tove
From:Jani
Heading:Reminder
Body:Don't forget me this weekend! 
++++++++++++++++++++++++++++++++++++++++

Longitud Mínima XML: 156
Longitud Mínima STXT: 111

Si comparamos sin cabecera de xml ni namespace de STXT:

Longitud Mínima XML: 112
Longitud Mínima STXT: 75

Creo que es evidente que

				**STXT es más compacto que XML**

Pero además

				**STXT es más entendible que XML en estado compactado**

o dicho de otra forma

				**STXT mantiene su comprensión en estado compactado, mientras que XML no**
				
Ah, por cierto, hemos perdido información? No... pero y si hubiera atributos? Lo comentaremos más adelante.
De momento, creedme, pero

				**Con STXT se puede expresar lo mismo que con XML**
				
Vamos a provar algo divertido...
Como queda un documento XML con un nodo que a su vez contiene texto que es XML?

Lo vemos:

++++++++++++++++++++++++++++++++++++++++++++
<?xml version="1.0" encoding="UTF-8" ?> 
<!-- This is a comment  --> 
<note>
<to>Tove</to> 
<from>Jani</from> 
<heading>Reminder</heading> 
<body>
	Don't forget me this weekend!
	&lt;note&gt;
	&lt;to&gt;Tove&lt;/to&gt;
	&lt;from&gt;Jani&lt;/from&gt;
	&lt;heading&gt;Reminder&lt;/heading&gt;
	&lt;body&gt;Don&apos;t forget me this weekend!&lt;/body&gt;
	&lt;/note&gt;
</body> 
</note>
++++++++++++++++++++++++++++++++++++++++++++

Y en STXT:

++++++++++++++++++++++++++++++++++++++++
Note (www.example.com/notes.stxt):
To:Tove
From:Jani
Heading:Reminder
Body:Don't forget me this weekend!
	<note>
	<to>Tove</to> 
	<from>Jani</from> 
	<heading>Reminder</heading> 
	<body>Don't forget me this weekend!</body> 
	</note>
++++++++++++++++++++++++++++++++++++++++

Creo que sobran los comentarios. Es evidente, pero:

			**STXT es más sencillo que XML**

*************
Atributos xml
*************

+++++++++++++++++++++++++++++++ (mostrar en negrita id y show)
<ejemplo id="1" show="false">
	Hola Mundo
</ejemplo>
+++++++++++++++++++++++++++++++

Los atributos en xml siempre han sido motivo de controversia. ¿Qué es un atributo y que debería
ser un Nodo? Siempre es difícil de decidir. Está bastante aceptado que los atributos
son como metadatos del nodo, es decir aportan información, pero no del contenido.
Hay casos en los que es aceptable, pero (según mi modesta opinión) en la mayoría de ocasiones son una fuente
de problemas. 

Otro problema añadido es que todos han de tener en cuenta que los atributos existen.
Esto afecta a DTD's, XSD's, librerías, programadores... ¿Y para qué? Realmente no aportan mucho.
Sólo complejidad innecesaria. Además, esto es STXT. Aquí es //semantic text//, todo tiene
un significado, y todo es importante.

				**STXT no tiene atributos al estilo de XML**
				
Esto lo hace //MEJOR// no peor. A veces, //MENOS ES MAS//.

El ejemplo anterior en STXT sería:

+++++++++++++++++++++++++++++++
ejemplo(...):
	id:1
	show:false
	texto:Hola Mundo
+++++++++++++++++++++++++++++++

De forma general, siempre podemos hacer algo de la forma:

++++++++++++++++++
nombre_nodo:
	metadatos:
		m1:xxx
		m2:xxx
		m3:xxx
	nodo2:
	nodo3:
++++++++++++++++++

********
DTD, XSD
********

---------------
XSD, DTD y STXT
---------------

Vamos a hablar de dtd's y xsd's de xml. Son documentos que nos dicen como tiene que ser 
un xml válido. Funcionan más o menos bien, y cada uno tiene sus ventajas e inconvenientes.
Si miráis por Internet un poco veréis lo que quiero decir. En resumen, dtd es más
sencillo que xsd, menos potente, y está escrito en un lenguaje distinto a XML. XSD es 
más potente, más difícil de hacer y entender, pero está escrito en XML, no hay que aprender
otro lenguaje.

¿Y que pasa con STXT? Lo deberíais saber :-D Tiene lo mejor. Es un documento STXT, es potente
y fácil de aprender. Como el propio STXT. E integrado en el propio lenguaje.

	STXT 2
	XML  0

------------
¿Dónde está?
------------

No quiero volver a oir lo de xml... y como sé la gramática de esto? En stxt TODO está en la web. Cuando se quiere crear
un documento automáticamente hay que poder ver su definición. Por un lado hay la gramática que directamente ha de ser
accesible. Además, en las webs decentes, si substituimos *.stxt por *.html deberíamos ver una página equivalente con 
una descripción y algún ejemplo. Éste es el comportamiento por defecto. 

			Un documento STXT por definición tiene una gramática asociada.
			Sinó no es STXT

----------------
(**) XSD del XSD
----------------

http://www.w3.org/2001/XMLSchema.xsd

Alguien quiere comparar el xsd de un xsd? 
He estado tentado en incluirlo en el libro, pero hubiera ocupado más de 50 páginas, y no estoy exagerando :-D
Os dejo el enlace, por si alguien lo quiere ver:

	http://www.w3.org/2001/XMLSchema.xsd
	
¿Hay alguien que lo entienda? Perdón, perdón, ¿hay alguien //que no sea un superheroe// que lo entienda?
	
En cambio con stxt la mayoría de personas no tendría dificultad en entender el stxt de un stxt.
Lo voy a enseñar, que no se diga que no me atrevo:

+++++++++++++++++++++++++++++++++++++++++++++++++++++
ns(www.semantictext.info/namespace.stxt):
	type_def:
		name:namespace_definition
		type:node
		alias:Namespace Definition
		alias: ns_def
		alias:ns
		child:
			type: type_def
			num: +
	type_def:
		name:type_def
		type:node
		alias:Type Definition
		alias:Type Name
		alias:td
		child:
			type:name
			num:1
		child:
			type:alias
			num:*
		child:
			type:type
			num:1
		child:
			type:description
			num:?
		child:
			type:child
			num:*
	type_def:
		name:child
		type:node
		alias:Child Node
		alias:Child Element
		alias:ch
		child:
			type:type
			num:1
		child:
			type:num
			num:1
		child:
			type:namespace
			num:?
	type_def:
		name:name
		type:text
	type_def:
		name:alias
		type:text
	type_def:
		name:type
		type:text
	type_def:
		name:num
		type:text
	type_def:
		name:description
		type:text
	type_def:
		name:namespace
		type:text
+++++++++++++++++++++++++++++++++++++++++++++++++++++

Ya está!! Comparadlo!! :-D No hay color!!

Vale, es mucho menos sencillo, pero nadie se atreve a leer lo que sale de los xsd's!!
Todo es mucho más complicado. Con STXT hemos buscado la sencillez. Nos gusta
hacer las cosas a mano! No debería ser obligatorio tener un editor o lector de XML!

********************
Parsers y validators
********************

Alguien quiere comparar los parsers y validators? No hace falta, uno con stxt es
MUCHO más rápido, más sencillo de implementar,... ¿Por qué? Es muy sencillo.

						**STXT tiene muchas menos normas que XML**
						
Esto hace que todo sea más fácil. El código de los parsers es más rápido.
Tienen menos errores. Es más fácil de mantener. De hacer. Además, otra ventaja
es que parsear y validar se puede hacer de forma simultánea. Con XML hay que decidir
si realmente hay que validar el xsd... y dónde está? Ya estamos otra vez con el problema
de siempre. Con STXT todo es mucho más claro. Cualquier documento tiene que tener una definición
de como es. Pero es muy fácil de hacer. No se tarda nada. Vale la pena. Es una de grandes
ventajas de STXT.

Nota: Para los amantes de la información privada: si el parseador o editor de stxt tiene
	un repositorio propio de gramáticas STXT, no tiene por qué estar visible en la web.
	No me gusta, estoy en contra, pero no hay nada ni nadie que impida hacer esto.
	De hecho, en ocasiones será necesario, como yo he tenido que hacer con mis
	ejemplos en mi propio libro.


**********
Namespaces
**********

Siempre he odiado los namespaces de xml. Son farragosos, difíciles de controlar, y normalmente no nos dicen nada.
Los namespaces en stxt son completamente distintos, ya que no son nada difíciles de hacer, aportan toda la información
necesaria, y no se pierde la expresividad que se consigue con xml. De hecho, ni tan siquiera los ves!! 
Pero estan ahí, ayudando. Completando la obra. 

En xml los nm molestan, aportan complejidad, y dan muy poco a cambio.

Por cierto, hemos desterrado el http:// de los namespace. Ya no es necesario, ya que ello implicaría
que es distinto si se obtiene con http:// que si se hace con https://. Esto no 
tiene sentido, lo que se lo tiene es que sea a partir de //. 

******
Futuro
******

He sido muy sincero con todo mi análisis de XML vs STXT, pero hay algo que no debemos olvidar.
XML tiene mucho recorrido ya. Está probado, se usa en todas partes. Es un estándard. 
STXT es nuevo, apenas acaba de nacer, y tiene un largo camino que recorrer. 

Pero creo que vale la pena.

